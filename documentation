
1. Amadeus Developer Account:

    Create an Amadeus developer account at https://developers.amadeus.com/self-service. This will be necessary to obtain your API key and secret.

2.Install the Amadeus Package:

    composer require amadeus4dev/amadeus-php

3. Obtain API Credentials:
    - then Log in to your Amadeus developer account.

    - Go to your "Self-Service Workspace" and create a new project (or use an existing one).

    - Within the project, navigate to the "API Keys" section.

    - Generate a new API key and secret pair and store them securely (do not commit them to your version control system).

4. Configuration:

    There are two ways to configure your Amadeus API credentials:

 A. Environment Variables:
    change in .env file
    AMADEUS_API_KEY=YOUR_API_KEY
    AMADEUS_API_SECRET=YOUR_API_SECRET

    Important: Never commit your .env file to version control.
B. Laravel Configuration (Optional):

    You can create a configuration file for Amadeus using Laravel's configuration system.
    Run the following command to create a new configuration file:
    Bash
    php artisan config:make amadeus
Use code with caution.
Open the newly created config/amadeus.php file and add the following:
PHP
return [
    'api_key' => env('AMADEUS_API_KEY'),
    'api_secret' => env('AMADEUS_API_SECRET'),
];
Use code with caution.
5. Using Amadeus in Your Code:

A. Accessing the Amadeus Client:

Import the necessary classes:
PHP
use Amadeus\Amadeus;
Use code with caution.
Create an instance of the Amadeus client using your API credentials:
PHP
$amadeus = Amadeus::builder(env('AMADEUS_API_KEY'), env('AMADEUS_API_SECRET'))->build();
Use code with caution.
B. Making API Calls:

Refer to the amadeus4dev/amadeus-php documentation [https://github.com/amadeus4dev-examples/amadeus-php] for detailed information on available API methods. The documentation provides examples for various API calls.
Example Code (Flight Search):

Assuming you want to search for flights, here's a basic example:

PHP
$origin = 'MAD'; // Madrid
$destination = 'JFK'; // New York
$departureDate = date('Y-m-d', strtotime('+1 week')); // One week from today

$flights = $amadeus->flights->search([
    'origin' => $origin,
    'destination' => $destination,
    'departure_date' => $departureDate
]);

// Process the flight search results as needed
Use code with caution.
6. Testing:

Implement thorough testing to ensure your Amadeus integration is working as expected. Test different API calls and handle potential errors gracefully.
Additional Tips:

Explore Laravel's caching mechanisms to potentially improve response times for frequently accessed API data.
Leverage Laravel's dependency injection to make your Amadeus integration more modular and easier to test.
By following these steps, you should have successfully set up the Amadeus API integration in your Laravel 10 project using amadeus4dev/amadeus-php. Remember to adapt the code examples to your specific needs and refer to the official documentation for comprehensive details on available functionalities.
